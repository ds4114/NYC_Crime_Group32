[["data.html", "Chapter 3 Data 3.1 Source 3.2 Data Transformation and Cleaning 3.3 Filter Table for Relevance 3.4 Select and Rename Columns in a Usuable Table 3.5 Missing value analysis", " Chapter 3 Data library(tidyverse) library(dplyr) library(lubridate) library(geosphere) library(redav) #remotes::install_github(&quot;jtr13/redav&quot;) library(ggridges) library(ggplot2) library(scales) library(forcats) library(Lock5withR) library(tidyr) library(vcdExtra) 3.1 Source As discussed in the Proposal section, the data for this project comes from published crime reports. NYC Open Data (NYC Office of Technology and Innovation (OTI)) in conjunction with New York City Police Department (NYPD) makes public safety data available for anyone online. In particular they publish Complaint Data which contains felony, misdemeanor, and violation crimes reported to the NYPD from 2006 till present. Year-to-Date (YTD) (2022-01 to 2022-09): https://data.cityofnewyork.us/Public-Safety/NYPD-Complaint-Data-Current-Year-To-Date-/5uac-w243 The dataset contains mostly categorical variables and dates with each row indicating a crime/violation. As of the last update on October 19, 2022, the YTD Dataset contains 397K rows and 36 columns. A data dictionary is provided by NYC Open Data at the link above. Additional details can be found in the Proposal: https://ds4114.github.io/NYC_Crime_Group32/proposal.html#data-availability 3.2 Data Transformation and Cleaning This .Rmd file contains the following sections: -Data Loading: To show data was ingested into the environment -Bucketing: To combine values in a derived field for simplifying graphs -Date Transformations: To make strings into dates and extract time information -Derived Geo Fields: To calculate distances between points -Derive Other Fields: To derived other fields and perform minor cleaning operations We then filter our data frame to relevant records, and then select key fields for ease-of-use. “Relevant” records are defined by time frame and crime category explained more below. There is also a section at the end on missing data. 3.2.1 Data Loading #Group32 - This file has been added to gitignore so it will not be uploaded. So we are on the same page and can run the same code, add the csv to your local project folder in a new subfolder &quot;data&quot;. df_raw &lt;- read_csv(&#39;./data/NYPD_Complaint_Data_Current__Year_To_Date_.csv&#39; , col_types= cols( CMPLNT_NUM = col_character() #was loading as number so numbers with letters were showing as null ) ) #View(df_raw) #head(df_raw) #make a copy of the raw data to manipulate df &lt;- df_raw 3.2.2 Bucket Crime Types This code creates a new field to simplify the crime category to reduce the number of unique values. df &lt;- df %&gt;% mutate(CRIME_CAT = case_when( OFNS_DESC %in% c(&quot;RAPE&quot;, &quot;SEX CRIMES&quot;, &quot;HARRASSMENT 2&quot;, &quot;FELONY SEX CRIMES&quot;, &quot;PROSTITUTION &amp; RELATED OFFENSES&quot;) ~ &quot;SEX CRIMES&quot;, OFNS_DESC %in% c(&quot;DANGEROUS DRUGS&quot;,&quot;CANNABIS RELATED OFFENSES&quot;,&quot;INTOXICATED &amp; IMPAIRED DRIVING&quot;,&quot;ALCOHOLIC BEVERAGE CONTROL LAW&quot;,&quot;INTOXICATED/IMPAIRED DRIVING&quot;) ~ &quot;DRUG AND ALCOHOL RELATED&quot;, OFNS_DESC %in% c(&quot;ROBBERY&quot;,&quot;GRAND LARCENY&quot;,&quot;THEFT-FRAUD&quot;,&quot;PETIT LARCENY&quot;,&quot;BURGLARY&quot;,&quot;GRAND LARCENY OF MOTOR VEHICLE&quot;,&quot;POSSESSION OF STOLEN PROPERTY&quot;,&quot;THEFT OF SERVICES&quot;,&quot;BURGLAR&#39;S TOOLS&quot;,&quot;PETIT LARCENY OF MOTOR VEHICLE&quot;,&quot;OTHER OFFENSES RELATED TO THEF&quot;) ~ &quot;THEFT OR BURGLARY&quot;, OFNS_DESC %in% c(&quot;DANGEROUS WEAPONS&quot;,&quot;MURDER &amp; NON-NEGL. MANSLAUGHTER&quot;,&quot;KIDNAPPING &amp; RELATED OFFENSES&quot;,&quot;HOMICIDE-NEGLIGENT,UNCLASSIFIE&quot;,&quot;HOMICIDE-NEGLIGENT-VEHICLE&quot;,&quot;KIDNAPPING&quot;,&quot;FELONY ASSAULT&quot;,&quot;ARSON&quot;,&quot;ASSAULT 3 &amp; RELATED OFFENSES&quot;,&quot;UNLAWFUL POSS. WEAP. ON SCHOOL&quot;,&quot;MURDER &amp; NON-NEGL. MANSLAUGHTER&quot;) ~ &quot;MAJOR VIOLENT CRIMES&quot;, OFNS_DESC %in% c(&quot;CRIMINAL MISCHIEF &amp; RELATED OF&quot;,&quot;UNAUTHORIZED USE OF A VEHICLE&quot;,&quot;FRAUDS&quot;,&quot;OFFENSES AGAINST PUBLIC SAFETY&quot;,&quot;DISORDERLY CONDUCT&quot;,&quot;JOSTLING&quot;,&quot;DISRUPTION OF A RELIGIOUS SERV&quot;,&quot;ESCAPE 3&quot;,&quot;OFF. AGNST PUB ORD SENSBLTY &amp;&quot;,&quot;CRIMINAL TRESPASS&quot;,&quot;VEHICLE AND TRAFFIC LAWS&quot;,&quot;GAMBLING&quot;,&quot;OFFENSES AGAINST THE PERSON&quot;,&quot;OFFENSES INVOLVING FRAUD&quot;,&quot;FRAUDULENT ACCOSTING&quot;,&quot;ANTICIPATORY OFFENSES&quot;,&quot;LOITERING/GAMBLING (CARDS, DIC&quot;) ~ &quot;FRAUD/GAMBLING AND MISC&quot;, OFNS_DESC %in% c(&quot;NYS LAWS-UNCLASSIFIED FELONY&quot;,&quot;MISCELLANEOUS PENAL LAW&quot;,&quot;FORGERY&quot;,&quot;OFFENSES AGAINST PUBLIC ADMINI&quot;,&quot;CHILD ABANDONMENT/NON SUPPORT&quot;,&quot;NYS LAWS-UNCLASSIFIED VIOLATION&quot;,&quot;OTHER STATE LAWS&quot;,&quot;OTHER STATE LAWS (NON PENAL LAW)&quot;,&quot;NEW YORK CITY HEALTH CODE&quot;,&quot;ADMINISTRATIVE CODE&quot;,&quot;OTHER STATE LAWS (NON PENAL LA&quot;,&quot;AGRICULTURE &amp; MRKTS LAW-UNCLASSIFIED&quot;,&quot;ENDAN WELFARE INCOMP&quot;,&quot;OFFENSES RELATED TO CHILDREN&quot;) ~&quot;OTHER&quot;)) There are 5 values with missing “OFNS_DESC”. Since they have valid PD_CD and PD_DESC, we can impute these values from other columns with the same PD_CD. -Two values are for obscenity - 594 PD_CD (categorized as sex crimes) -One values for crime pos weap - 797 PD_CD (categorized as dangerous weapons) -One value for “place false bomb” - 648 PD_CD (categorized as other) -One value for “noise” - 872 PD_CD (categorized as other) df$CRIME_CAT[df$CMPLNT_NUM %in% c(&quot;243170965&quot;, &quot;245874611&quot;)] &lt;- &quot;OTHER&quot; df$OFNS_DESC[df$CMPLNT_NUM %in% c(&quot;248613125&quot;, &quot;248290778&quot;)] &lt;- &quot;SEX CRIMES&quot; df$OFNS_DESC[df$CMPLNT_NUM %in% (&quot;246605653&quot;)] &lt;- &quot;DANGEROUS WEAPONS&quot; #No Nulls now #View(df[is.na(df$CRIME_CAT),]) 3.2.3 Date/Time Transformation 3.2.3.1 Cleaning null values/ranges Per the data dictionary, there is both a “from_date” and a “to_date” when the exact time is unknown. There is also a “report date” for when the crime was reported. Using these fields in conjunction, we can derive a new clean field that is the assumed date of the incident. Assumptions: When there is a range, we will use the “from” date only because is populated well and will on average approximate the frequency of crime over time; when from_date is null, we will use the report_date (does not occur often, see Missing Data Analysis below). df &lt;- df %&gt;% mutate( #use from date and report date if null. If to_date then just use from date and we can argue it averages out since new reports will start as other end Incident_Date_raw = case_when (is.null(CMPLNT_FR_DT) ~ RPT_DT ,CMPLNT_FR_DT == &quot;(null)&quot; ~ RPT_DT ,TRUE ~ CMPLNT_FR_DT ) #flag if estimated (ie from date is null or to date is populated) ,Incident_Date_Estimated_Flag = case_when ( is.null(CMPLNT_FR_DT) ~ &#39;Y&#39; ,CMPLNT_FR_DT == &quot;(null)&quot; ~ &#39;Y&#39; ,!is.null(CMPLNT_TO_DT) ~ &#39;Y&#39; ,CMPLNT_TO_DT != &quot;(null)&quot; ~ &#39;Y&#39; ,TRUE ~ &#39;N&#39; ) ) #Convert to times df &lt;- df %&gt;% mutate( #creating date and time together for lubridate Incident_Date = as.Date(Incident_Date_raw, format = &#39;%m/%d/%Y&#39;) ,Incident_Datetime = as.POSIXct(paste(Incident_Date_raw,CMPLNT_FR_TM), format = &#39;%m/%d/%Y %H:%M:%S&#39;) ) %&gt;% mutate( Incident_HourTime = hour(Incident_Datetime) + minute(Incident_Datetime)/60 ,Incident_Month = month(Incident_Date) ,Incident_DayOfWeek = wday(Incident_Date, label = TRUE, abbr = TRUE) ) 3.2.4 GeoLocation Fields This section uses a new package to calcluate the distance between two points in Lat/Long format. Here we are finding the distance from each crime to the center of the main Columbia campus to use later. #Location of Columbia - hardcoded for calculation CU_Latitude = 40.807384 CU_Longitude = -73.963036 df$dist_to_CU &lt;- apply(df, 1, function(x)distm( c(x[which( colnames(df)==&quot;Longitude&quot;)],x[which(colnames(df)==&quot;Latitude&quot;)]) ,c(CU_Longitude,CU_Latitude) ,fun = distGeo) ) 3.2.5 Other Derivations In this section, we add additional fields for more classification (explain more in the Results section), reclassify “null” to Unknown in specific instances, shorten values, and combine informaiton to simplify categories. #Update certain null fields. Setting race to null because there is already an &quot;Unknown&quot; category df$LOC_OF_OCCUR_DESC[df$LOC_OF_OCCUR_DESC==&quot;(null)&quot;]&lt;-NA df$BORO_NM[df$BORO_NM==&quot;(null)&quot;]&lt;-NA df$SUSP_RACE[df$SUSP_RACE==&quot;(null)&quot;]&lt;-&quot;UNKNOWN&quot; df$VIC_RACE[df$VIC_RACE==&quot;(null)&quot;]&lt;-&quot;UNKNOWN&quot; df &lt;- df %&gt;% mutate( #get a flag for outside vs inside Inside_Outside = case_when ( LOC_OF_OCCUR_DESC %in% c(&quot;FRONT OF&quot; , &quot;OPPOSITE OF&quot; , &quot;REAR OF&quot;) ~ &quot;OUTSIDE&quot; ,LOC_OF_OCCUR_DESC %in% c(&quot;INSIDE&quot;) ~ &quot;INSIDE&quot; #,LOC_OF_OCCUR_DESC == &quot;(null)&quot; ~ NULL #doesnt run so added statement above ,TRUE ~ LOC_OF_OCCUR_DESC ) #if victim was a person (not a business/govt) ,VIC_Individual_Flag = case_when ( VIC_SEX %in% c(&quot;M&quot;,&quot;F&quot;,&quot;L&quot;) ~ &#39;Y&#39; ,TRUE ~ &#39;N&#39; ) ,SUSP_AGE_GROUP = case_when ( SUSP_AGE_GROUP %in% c(&#39;&lt;18&#39;,&#39;18-24&#39;,&#39;25-44&#39;,&#39;45-64&#39;) ~ SUSP_AGE_GROUP ,TRUE ~ &#39;UNKNOWN&#39; ) ,VIC_AGE_GROUP = case_when ( VIC_AGE_GROUP %in% c(&#39;&lt;18&#39;,&#39;18-24&#39;,&#39;25-44&#39;,&#39;45-64&#39;) ~ VIC_AGE_GROUP ,TRUE ~ &#39;UNKNOWN&#39; ) ,SUSP_RACE_short = case_when ( SUSP_RACE == &#39;AMERICAN INDIAN/ALASKAN NATIVE&#39; ~ &#39;AI&#39; ,SUSP_RACE == &#39;ASIAN / PACIFIC ISLANDER&#39; ~ &#39;AP&#39; ,SUSP_RACE == &#39;BLACK&#39; ~ &#39;B&#39; ,SUSP_RACE == &#39;BLACK HISPANIC&#39; ~ &#39;BH&#39; ,SUSP_RACE == &#39;UNKNOWN&#39; ~ &#39;U&#39; ,SUSP_RACE == &#39;WHITE&#39; ~ &#39;W&#39; ,SUSP_RACE == &#39;WHITE HISPANIC&#39; ~ &#39;WH&#39; ) ,VIC_RACE_short = case_when ( VIC_RACE == &#39;AMERICAN INDIAN/ALASKAN NATIVE&#39; ~ &#39;AI&#39; ,VIC_RACE == &#39;ASIAN / PACIFIC ISLANDER&#39; ~ &#39;AP&#39; ,VIC_RACE == &#39;BLACK&#39; ~ &#39;B&#39; ,VIC_RACE == &#39;BLACK HISPANIC&#39; ~ &#39;BH&#39; ,VIC_RACE == &#39;UNKNOWN&#39; ~ &#39;U&#39; ,VIC_RACE == &#39;WHITE&#39; ~ &#39;W&#39; ,VIC_RACE == &#39;WHITE HISPANIC&#39; ~ &#39;WH&#39; ) ) %&gt;% mutate( Complaint_Count = 1 #maybe want to add like a intensity value or something? #TODO, make this field a little better/check values? ,Premise_Derived = case_when ( Inside_Outside == &#39;INSIDE&#39; ~ &#39;INSIDE&#39; ,PREM_TYP_DESC ==&quot;RESIDENCE - APT. HOUSE&quot; &amp; (Inside_Outside == &quot;(null)&quot; | is.null(Inside_Outside)) ~ &#39;INSIDE&#39; ,!is.null(PARKS_NM) &amp; PARKS_NM != &quot;(null)&quot; ~ &#39;PARK&#39; ,PREM_TYP_DESC %in% c(&quot;TRANSIT - NYC SUBWAY&quot;,&quot;BUS (NYC TRANSIT)&quot;,&quot;TRANSIT FACILITY (OTHER)&quot;) ~ &#39;SUBWAY&#39; ,TRUE ~ &#39;STREET&#39; ) ) 3.3 Filter Table for Relevance The raw data only contains crimes that were reported in 2022 even if they took place earlier. As we will show in the Results, this create a bias in the time series and this section creates a new data frame to filter out old records (as defined by derived field above; before 1/1/2022). We also filter for only “relevant” crimes - i.e. excluding parking violations, noise compliants (those in the “Other” category) df_filter &lt;- df %&gt;% filter( Incident_Date &gt;= as.Date(&#39;2022/01/01&#39;) ) %&gt;% filter ( !CRIME_CAT %in% c(&quot;OTHER&quot;) ) #TODO- distance filter? #View(df_filter) #unique(df_filter$CRIME_CAT) This improves the results as we will show in the next chapter. There are not many records that are excluded (396978 - 364298) 3.4 Select and Rename Columns in a Usuable Table This section simply chooses fields that are used in our analysis to simplify and reduce the overall size of the working data frame. #Not required df_key_fields &lt;- df_filter %&gt;% select( #Basic Info CMPLNT_NUM #,CRM_ATPT_CPTD_CD #,Complaint_Count #derived #Date Info ,Incident_Date_raw #derived #,Incident_Date_Estimated_Flag #derived #,Incident_Date #derived #,Incident_Datetime #derived #,Incident_HourTime #derived #,Incident_Month #derived #,Incident_DayOfWeek #derived ,CMPLNT_FR_DT ,CMPLNT_FR_TM #,CMPLNT_TO_DT #,CMPLNT_TO_TM ,RPT_DT #Location Info #,Inside_Outside #derived #missing a lot (because derived on field below) #,CU_Latitude #derived #,CU_Longitude #derived ,dist_to_CU #derived ,Premise_Derived #derived #,ADDR_PCT_CD ,BORO_NM #,HADEVELOPT #,HOUSING_PSA #,JURISDICTION_CODE ,JURIS_DESC #,LOC_OF_OCCUR_DESC #missing a lot (because of privacy) #,PARKS_NM #,PATROL_BORO #,PD_CD #,PD_DESC #,PREM_TYP_DESC #,STATION_NAME #,TRANSIT_DISTRICT #,X_COORD_CD #,Y_COORD_CD #,Latitude #,Longitude ,Lat_Lon #,`New Georeferenced Column` #Crime Info ,CRIME_CAT #derived ,VIC_Individual_Flag #derived #,KY_CD ,LAW_CAT_CD ,OFNS_DESC ,SUSP_AGE_GROUP ,SUSP_RACE ,SUSP_RACE_short ,SUSP_SEX ,VIC_AGE_GROUP ,VIC_RACE ,VIC_RACE_short ,VIC_SEX ) 3.5 Missing value analysis –TODO - update this section, maybe create a table with # of nulls vs “(null)” for each field First let us look at the raw data to see what things look like. #View(df_key_fields[is.na(df_key_fields$CMPLNT_NUM),]) #View(df[!is.na(df$TRANSIT_DISTRICT),]) plot_missing(df, percent = FALSE) plot_missing( df[ , !colnames(df) %in% c(&quot;TRANSIT_DISTRICT&quot;,&quot;HOUSING_PSA&quot;) ] , percent = FALSE) These charts are hard to read given the number of columns but it shows that most data is actually populated very well. There are two problem fields causing all of nulls but we can re-graph this without those and see that complete cases are at the top. However, this is still not accurate because there are string values in the data that say “(null)” or “Unknown” which would appear as populated. In any case, we do not need to clean and evaluate all columns, so let us work off of the new, filtered dataset (see below). Side Note: We initially noticed the Complaint_Num was null often but this was due to containing alphanumeric characters but R loaded it as a number only. plot_missing(df_key_fields, percent = FALSE) The filtered data (relevant columns and rows only) is populated very well and this dataset accounts for improperly coded values where “(null)” will appear as NULL properly. We see there are a few blanks for lat/long and thus the related derived field, but otherwise we have a good data frame to use in the next chapter. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
